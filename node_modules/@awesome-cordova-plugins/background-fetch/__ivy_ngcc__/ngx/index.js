import { __extends } from "tslib";
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var BackgroundFetch = /** @class */ (function (_super) {
    __extends(BackgroundFetch, _super);
    function BackgroundFetch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetch.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetch.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetch.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetch.prototype.finish = function (taskId) { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetch.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetch.pluginName = "BackgroundFetch";
    BackgroundFetch.plugin = "cordova-plugin-background-fetch";
    BackgroundFetch.pluginRef = "BackgroundFetch";
    BackgroundFetch.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetch.platforms = ["iOS"];
BackgroundFetch.ɵfac = /*@__PURE__*/ function () { var ɵBackgroundFetch_BaseFactory; return function BackgroundFetch_Factory(t) { return (ɵBackgroundFetch_BaseFactory || (ɵBackgroundFetch_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BackgroundFetch)))(t || BackgroundFetch); }; }();
BackgroundFetch.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BackgroundFetch, factory: function (t) { return BackgroundFetch.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BackgroundFetch, [{
        type: Injectable
    }], null, null); })();
    return BackgroundFetch;
}(AwesomeCordovaNativePlugin));
export { BackgroundFetch };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AYXdlc29tZS1jb3Jkb3ZhLXBsdWdpbnMvcGx1Z2lucy9iYWNrZ3JvdW5kLWZldGNoL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUMzQztBQUdTLElBcUQ0QixtQ0FBMEI7QUFBQztBQUV2QztBQUVzQjtBQUFNLElBTW5ELG1DQUFTLGFBQUMsTUFBNkI7QUFNbEMsSUFLTCwrQkFBSztBQUtpQixJQUt0Qiw4QkFBSTtBQUtpQixJQU9yQixnQ0FBTSxhQUFDLE1BQWM7QUFJcEIsSUFJRCxnQ0FBTTtBQUlzQjtBQUFvRDtBQUFnRTtBQUFtRDtBQUFnRzttREF4RHBTLFVBQVU7Ozs7MEJBQ0w7QUFBQywwQkExRFA7QUFBRSxFQTBEbUMsMEJBQTBCO0FBQzlELFNBRFksZUFBZTtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCYWNrZ3JvdW5kRmV0Y2hDb25maWcge1xuICAvKipcbiAgICogU2V0IHRydWUgdG8gY2Vhc2UgYmFja2dyb3VuZC1mZXRjaCBmcm9tIG9wZXJhdGluZyBhZnRlciB1c2VyIFwiY2xvc2VzXCIgdGhlIGFwcC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICovXG4gIHN0b3BPblRlcm1pbmF0ZT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgQmFja2dyb3VuZCBGZXRjaFxuICogQGRlc2NyaXB0aW9uXG4gKiBpT1MgQmFja2dyb3VuZCBGZXRjaCBJbXBsZW1lbnRhdGlvbi4gU2VlOiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vcmVmZXJlbmNlL3Vpa2l0L3VpYXBwbGljYXRpb24jMTY1NzM5OVxuICogaU9TIEJhY2tncm91bmQgRmV0Y2ggaXMgYmFzaWNhbGx5IGFuIEFQSSB3aGljaCB3YWtlcyB1cCB5b3VyIGFwcCBhYm91dCBldmVyeSAxNSBtaW51dGVzIChkdXJpbmcgdGhlIHVzZXIncyBwcmltZS10aW1lIGhvdXJzKSBhbmQgcHJvdmlkZXMgeW91ciBhcHAgZXhhY3RseSAzMHMgb2YgYmFja2dyb3VuZCBydW5uaW5nLXRpbWUuIFRoaXMgcGx1Z2luIHdpbGwgZXhlY3V0ZSB5b3VyIHByb3ZpZGVkIGNhbGxiYWNrRm4gd2hlbmV2ZXIgYSBiYWNrZ3JvdW5kLWZldGNoIGV2ZW50IG9jY3Vycy4gVGhlcmUgaXMgbm8gd2F5IHRvIGluY3JlYXNlIHRoZSByYXRlIHdoaWNoIGEgZmV0Y2gtZXZlbnQgb2NjdXJzIGFuZCB0aGlzIHBsdWdpbiBzZXRzIHRoZSByYXRlIHRvIHRoZSBtb3N0IGZyZXF1ZW50IHBvc3NpYmxlIHZhbHVlIG9mIFVJQXBwbGljYXRpb25CYWNrZ3JvdW5kRmV0Y2hJbnRlcnZhbE1pbmltdW0gLS0gaU9TIGRldGVybWluZXMgdGhlIHJhdGUgYXV0b21hdGljYWxseSBiYXNlZCB1cG9uIGRldmljZSB1c2FnZSBhbmQgdGltZS1vZi1kYXkgKGllOiBmZXRjaC1yYXRlIGlzIGFib3V0IH4xNW1pbiBkdXJpbmcgcHJpbWUtdGltZSBob3VyczsgbGVzcyBmcmVxdWVudGx5IHdoZW4gdGhlIHVzZXIgaXMgcHJlc3VtZWQgdG8gYmUgc2xlZXBpbmcsIGF0IDNhbSBmb3IgZXhhbXBsZSkuXG4gKiBGb3IgbW9yZSBkZXRhaWwsIHBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2hcbiAqIEB1c2FnZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhY2tncm91bmRGZXRjaCwgQmFja2dyb3VuZEZldGNoQ29uZmlnIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2JhY2tncm91bmQtZmV0Y2gvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWNrZ3JvdW5kRmV0Y2g6IEJhY2tncm91bmRGZXRjaCkge1xuICpcbiAqICAgY29uc3QgY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcgPSB7XG4gKiAgICAgc3RvcE9uVGVybWluYXRlOiBmYWxzZSwgLy8gU2V0IHRydWUgdG8gY2Vhc2UgYmFja2dyb3VuZC1mZXRjaCBmcm9tIG9wZXJhdGluZyBhZnRlciB1c2VyIFwiY2xvc2VzXCIgdGhlIGFwcC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqICAgfVxuICpcbiAqICAgYmFja2dyb3VuZEZldGNoLmNvbmZpZ3VyZShjb25maWcpXG4gKiAgICAgIC50aGVuKCgpID0+IHtcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIEZldGNoIGluaXRpYWxpemVkJyk7XG4gKlxuICogICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kRmV0Y2guZmluaXNoKCk7XG4gKlxuICogICAgICB9KVxuICogICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnRXJyb3IgaW5pdGlhbGl6aW5nIGJhY2tncm91bmQgZmV0Y2gnLCBlKSk7XG4gKlxuICogICAvLyBTdGFydCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgYmUgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIE5PVEUgdGhlICNjb25maWd1cmUgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2FsbHMgI3N0YXJ0LiBZb3UgZG8gbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBhZnRlciB5b3UgI2NvbmZpZ3VyZSB0aGUgcGx1Z2luXG4gKiAgIGJhY2tncm91bmRGZXRjaC5zdGFydCgpO1xuICpcbiAqICAgLy8gU3RvcCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkgZnJvbSBmaXJpbmcgZmV0Y2ggZXZlbnRzLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIG5vIGxvbmdlciBiZSBleGVjdXRlZC5cbiAqICAgYmFja2dyb3VuZEZldGNoLnN0b3AoKTtcbiAqXG4gKlxuICogfVxuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEJhY2tncm91bmRGZXRjaENvbmZpZ1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JhY2tncm91bmRGZXRjaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2gnLFxuICBwbHVnaW5SZWY6ICdCYWNrZ3JvdW5kRmV0Y2gnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3RyYW5zaXN0b3Jzb2Z0L2NvcmRvdmEtcGx1Z2luLWJhY2tncm91bmQtZmV0Y2gnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRGZXRjaCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIHBsdWdpbidzIGZldGNoIGNhbGxiYWNrRm5cbiAgICpcbiAgICogQHBhcmFtIHtCYWNrZ3JvdW5kRmV0Y2hDb25maWd9IGNvbmZpZyBDb25maWd1cmF0aW9uIGZvciBwbHVnaW5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGNvbmZpZ3VyZShjb25maWc6IEJhY2tncm91bmRGZXRjaENvbmZpZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSS5cbiAgICogWW91ciBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgd2lsbCBiZSBleGVjdXRlZCBlYWNoIHRpbWUgYSBiYWNrZ3JvdW5kLWZldGNoIGV2ZW50IG9jY3Vycy4gTk9URSB0aGUgI2NvbmZpZ3VyZSBtZXRob2QgYXV0b21hdGljYWxseSBjYWxscyAjc3RhcnQuIFlvdSBkbyBub3QgaGF2ZSB0byBjYWxsIHRoaXMgbWV0aG9kIGFmdGVyIHlvdSAjY29uZmlndXJlIHRoZSBwbHVnaW5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkgZnJvbSBmaXJpbmcgZmV0Y2ggZXZlbnRzLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIG5vIGxvbmdlciBiZSBleGVjdXRlZC5cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBZb3UgTVVTVCBjYWxsIHRoaXMgbWV0aG9kIGluIHlvdXIgZmV0Y2ggY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIGluIG9yZGVyIHRvIHNpZ25hbCB0byBpT1MgdGhhdCB5b3VyIGZldGNoIGFjdGlvbiBpcyBjb21wbGV0ZS4gaU9TIHByb3ZpZGVzIG9ubHkgMzBzIG9mIGJhY2tncm91bmQtdGltZSBmb3IgYSBmZXRjaC1ldmVudCAtLSBpZiB5b3UgZXhjZWVkIHRoaXMgMzBzLCBpT1Mgd2lsbCBraWxsIHlvdXIgYXBwLlxuICAgKlxuICAgKiBAcGFyYW0gdGFza0lkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgZmluaXNoKHRhc2tJZDogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHN0YXR1cyBvZiB0aGUgYmFja2dyb3VuZC1mZXRjaFxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGF0dXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==