{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AwesomeCordovaNativePlugin } from '@awesome-cordova-plugins/core';\nexport interface BackgroundFetchConfig {\n    /**\n     * Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n     */\n    stopOnTerminate?: boolean;\n}\n/**\n * @name Background Fetch\n * @description\n * iOS Background Fetch Implementation. See: https://developer.apple.com/reference/uikit/uiapplication#1657399\n * iOS Background Fetch is basically an API which wakes up your app about every 15 minutes (during the user's prime-time hours) and provides your app exactly 30s of background running-time. This plugin will execute your provided callbackFn whenever a background-fetch event occurs. There is no way to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible value of UIApplicationBackgroundFetchIntervalMinimum -- iOS determines the rate automatically based upon device usage and time-of-day (ie: fetch-rate is about ~15min during prime-time hours; less frequently when the user is presumed to be sleeping, at 3am for example).\n * For more detail, please see https://github.com/transistorsoft/cordova-plugin-background-fetch\n * @usage\n *\n * ```typescript\n * import { BackgroundFetch, BackgroundFetchConfig } from '@awesome-cordova-plugins/background-fetch/ngx';\n *\n *\n * constructor(private backgroundFetch: BackgroundFetch) {\n *\n *   const config: BackgroundFetchConfig = {\n *     stopOnTerminate: false, // Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n *   }\n *\n *   backgroundFetch.configure(config)\n *      .then(() => {\n *          console.log('Background Fetch initialized');\n *\n *          this.backgroundFetch.finish();\n *\n *      })\n *      .catch(e => console.log('Error initializing background fetch', e));\n *\n *   // Start the background-fetch API. Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n *   backgroundFetch.start();\n *\n *   // Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n *   backgroundFetch.stop();\n *\n *\n * }\n *\n * ```\n * @interfaces\n * BackgroundFetchConfig\n */\nexport declare class BackgroundFetch extends AwesomeCordovaNativePlugin {\n    /**\n     * Configures the plugin's fetch callbackFn\n     *\n     * @param {BackgroundFetchConfig} config Configuration for plugin\n     * @returns {Promise<any>}\n     */\n    configure(config: BackgroundFetchConfig): Promise<any>;\n    /**\n     * Start the background-fetch API.\n     * Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n     *\n     * @returns {Promise<any>}\n     */\n    start(): Promise<any>;\n    /**\n     * Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n     *\n     * @returns {Promise<any>}\n     */\n    stop(): Promise<any>;\n    /**\n     * You MUST call this method in your fetch callbackFn provided to #configure in order to signal to iOS that your fetch action is complete. iOS provides only 30s of background-time for a fetch-event -- if you exceed this 30s, iOS will kill your app.\n     *\n     * @param taskId\n     */\n    finish(taskId: string): void;\n    /**\n     * Return the status of the background-fetch\n     *\n     * @returns {Promise<any>}\n     */\n    status(): Promise<any>;\n}\n"]}