import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var HealthKit = /** @class */ (function (_super) {
    __extends(HealthKit, _super);
    function HealthKit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HealthKit.prototype.available = function () { return cordova(this, "available", {}, arguments); };
    HealthKit.prototype.checkAuthStatus = function (options) { return cordova(this, "checkAuthStatus", {}, arguments); };
    HealthKit.prototype.requestAuthorization = function (options) { return cordova(this, "requestAuthorization", {}, arguments); };
    HealthKit.prototype.readDateOfBirth = function () { return cordova(this, "readDateOfBirth", {}, arguments); };
    HealthKit.prototype.readGender = function () { return cordova(this, "readGender", {}, arguments); };
    HealthKit.prototype.readBloodType = function () { return cordova(this, "readBloodType", {}, arguments); };
    HealthKit.prototype.readFitzpatrickSkinType = function () { return cordova(this, "readFitzpatrickSkinType", {}, arguments); };
    HealthKit.prototype.saveWeight = function (options) { return cordova(this, "saveWeight", {}, arguments); };
    HealthKit.prototype.readWeight = function (options) { return cordova(this, "readWeight", {}, arguments); };
    HealthKit.prototype.saveHeight = function (options) { return cordova(this, "saveHeight", {}, arguments); };
    HealthKit.prototype.readHeight = function (options) { return cordova(this, "readHeight", {}, arguments); };
    HealthKit.prototype.findWorkouts = function () { return cordova(this, "findWorkouts", {}, arguments); };
    HealthKit.prototype.saveWorkout = function (options) { return cordova(this, "saveWorkout", {}, arguments); };
    HealthKit.prototype.querySampleType = function (options) { return cordova(this, "querySampleType", {}, arguments); };
    HealthKit.prototype.querySampleTypeAggregated = function (options) { return cordova(this, "querySampleTypeAggregated", {}, arguments); };
    HealthKit.prototype.deleteSamples = function (options) { return cordova(this, "deleteSamples", {}, arguments); };
    HealthKit.prototype.monitorSampleType = function (options) { return cordova(this, "monitorSampleType", {}, arguments); };
    HealthKit.prototype.sumQuantityType = function (options) { return cordova(this, "sumQuantityType", {}, arguments); };
    HealthKit.prototype.saveQuantitySample = function (options) { return cordova(this, "saveQuantitySample", {}, arguments); };
    HealthKit.prototype.saveCorrelation = function (options) { return cordova(this, "saveCorrelation", {}, arguments); };
    HealthKit.prototype.queryCorrelationType = function (options) { return cordova(this, "queryCorrelationType", {}, arguments); };
    HealthKit.pluginName = "HealthKit";
    HealthKit.plugin = "com.telerik.plugins.healthkit";
    HealthKit.pluginRef = "window.plugins.healthkit";
    HealthKit.repo = "https://github.com/Telerik-Verified-Plugins/HealthKit";
    HealthKit.platforms = ["iOS"];
HealthKit.ɵfac = /*@__PURE__*/ function () { var ɵHealthKit_BaseFactory; return function HealthKit_Factory(t) { return (ɵHealthKit_BaseFactory || (ɵHealthKit_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(HealthKit)))(t || HealthKit); }; }();
HealthKit.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HealthKit, factory: function (t) { return HealthKit.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HealthKit, [{
        type: Injectable
    }], null, null); })();
    return HealthKit;
}(IonicNativePlugin));
export { HealthKit };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,